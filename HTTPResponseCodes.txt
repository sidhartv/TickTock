It's easier to rely upon HTTP response codes, rather than parsing messages. i.e. when the back-end sends code X, that means that the front-end should do action Y.

Getting a status:
	Request a status by sending a GET request to the StatusServlet (mapped to /status).
		MUST INCLUDE PARAMETERS:
			-username - (user to get statuses from)
			-time - date/time string (in MySQL format YYYY-MM-DD HH:MM:SS, where HH is in 24-hour clock mode). Can also be "current" to represent current time
	Response types:
	-200 = all good! The status of the user at the time is provided as a JSON object with username (not ID), status, and the time that the status was posted.
	-204 = all good, but no data to send back. Do whatever you need to render a lack of statuses made by this user.
	-412 = you ended up in Pittsburgh. Tell the user to get Primantis. Just kidding. A parameter was missing, or was invalid
	-500 = something went very wrong on the server side (either a bad connection to MySQL...or something like that)

Setting your own status:
	Set your status by sending a POST request to the StatusServlet (mapped to /status)
		MUST INCLUDE PARAMETERS:
		-userID (you know this, so use the ID, not the name)
		-status (you know...the actual thing)
		-expiry (the time that this status should expire)
	Response types:
		-204 = all good. You won't get anything back if the post is successful. Up to the front end what to do if we successfully post the status.
		-412 = malformed parameters. Can occur if user ID does not exist, or expiry is not a well-formed date
		-500 = something went very wrong on the server side
		
Getting pending friend requests: 
	-See who has friended you, or who you have friended by sending a GET request to the FriendRequestServlet (mapped to /friend_requests)
	-MUST INCLUDE PARAMETERS:
		-id - YOUR user id
		-party - equal to "target" if you want to see who has friended you or "initiator" to see who you've friended
	Response types:
	-200 = all good! Returns a JSON object containing an array of friend requests, each of which have the usernames of the initiator and target, along with the MySQL formatted date-time at which the request was sent
	-204 = all good, but no data to send back because there are no pending friend requests
	-412 = invalid parameters. Either the id provided is invalid, or the party is neither equal to "target" nor "initiator"
	-500 = server side error...welp
	
Making friend requests:
	-Send a POST request to the FriendRequestServlet, with parameter type="request"
	-MUST INCLUDE PARAMETERS:
		-me - your user ID
		-other - the other person's user name
		-type - set equal to "request" for this action
	Response types:
	-204 = all good. Servlet returns nothing when request is successful
	-412 = malformed parameters. Either you and the other person are already friends, a friend request already exists, a/the user(s) cannot be found, or type is invalid
	-500 = server side error

Approving friend requests:
	-Send a POST request to the FriendRequestServlet, with parameter type="approval"
	-MUST INCLUDE PARAMETERS:
		-me - your user ID
		-other - the other person's user name
		-type - set equal to "approval" for this action
	Response types:
		-204 = all good. Servlet returns nothing when approval is successful
		-412 = malformed parameters. Either you and the other person are already friends, a friend request does not exist, a/the user(s) cannot be found, or type is invalid
		-500 = server side error	
	
Getting a list of friends:
	-Send a GET request to the FriendList servlet (mapped to /friend_list)
	-MUST INCLUDE PARAMETER:
		-user - username of the person whose friend list we wish to acquire
	Response types:
		-200 = all good. Servlet returns a JSON array containing a list of usernames
		-204 = all good. Servlet returns nothing when person has no friends :'(
		-412 = malformed parameters. User does not exist in DB.
		-500 = severe server side error 
		
Seeing your meeting requests:
	-Send a GET request to the MeetingRequestServlet (/meeting_request) to see all of your meeting requests
	-Works more of less the same way as friend requests
	-MUST INCLUDE PARAMETER:
		-id - your user ID
		-party - equal to "propositioner" for when you want to see proposed meetings or "approver" when you want to see meetings proposed to you
	Response types: 
		-200 = all good. Servlet returns JSON array containing objects of meeting request ids, propositioner name, approver name, duration, expiry date, approved, scheduled
		-204 = all good. Servlet returns nothing when no meeting requests exist
		-412 = malformed parameters. Either id is invalid or party does not equal propositioner or approver
		-500 = Houston, we have a problem.

Creating a meeting request
	-Send a POST request to MeetingRequestServlet (/meeting_request) with parameter type = request
	-MUST INCLUDE PARAMETERS:
		-me - your own user id
		-other - other person's username
		-duration - duration of the meeting (minutes)
		-expiry - expiry date/time of the meeting request
		-type - must equal "request" for this action
	Response types: 
		-204 = all good. Servlet returns nothing when meeting request successfully created
		-412 = malformed paramaters. Either one of the user ids is invalid (or could not be found), type is neither approval nor request, the duration is invalid, the expiry could not be resolved to a date, or the request was sent to someone who is not a friend
		-500 = uhhh...Houston?
		
Approving meeting request
	-Send a POST request to the MeetingRequestServlet with parameter type = "approval"
	-MUST INCLUDE PARAMETERS:
		-id - id of the meeting to approve
		-type - must be "approval" for this action to occur
	Response types:
		-204 = all good. Servlet returns nothing when meeting request successfully created
		-412 = malformed parameters. Either the id does not exist in the DB, or the type is neither approval nor request
		-500 = Hello? Anyone there?

Get all users
	-Send a GET request to the GetAllUsersServlet, mapped to /get_all_users
	-No parameters required
	Response types:
		-200 = all good, will return TEXT (not json). Each username is on a new line
		-500 = As alone as when Squidward broke the time machine.
	
Get a user's states (all of them)
	-Send a GET request to the UserStateServlet with parameter type="user_all_states"
	-MUST INCLUDE PARAMETERS:
		-type - must equal "user_all_states" for this action
		-user - username of desired user
	Response types:
		-200 = all good, will return JSON with an array of states in format user_id, state, start_time, end_time
		-412 = username was probably bad
		-500 = just looking for a rock to deliver this pizza
		
Get a user's state at a given time
	-Send a GET request to the UserStateServlet with parameter type="user_state_at_time"
	-MUST INCLUDE PARAMETERS:
		-type - must equal "user_state_at_time" for this action
		-user - username of desired user
		-time - the time that you want the state for
	Response types:
		-200 = all good, will return TEXT, consisting of a single integer between 0 and 3
			0 - idle
			1 - sleep
			2 - bored out of mind
			3 - busy
		-412 = username was probably bad or time was invalid
		-500 = LOOK MOSS!!
		
Get all user's with a given state at a given time
	-Send a GET request to the UserStateServlet with parameter type="users_with_state_at_time"
	-MUST INCLUDE PARAMETERS:
		-type - must equal "users_with_state_at_time" for this action
		-state - state desired (0-3)
		-time - the time that you want the state for
	Response types:
		-200 = all good, will return TEXT, consisting of each username of people that have that state at this time, each on a new line
		-204 = all good, no users with this state at this time
		-412 = username was probably bad or time was invalid, state was out of bounds, or time was bad
		-500 = we forgot his drink